---
// Features Slider component - Interactive showcase of key features
import { featuresData, themeConfig } from '../data/featuresData.ts';

const totalSlides = featuresData.length;
console.log('FeaturesSlider server-side - Total features:', totalSlides);
---

<section id="funcionalidades" class="py-24 px-6 relative">
    <!-- Background decoration -->
    <div
        class="absolute inset-0 bg-gradient-to-br from-slate-800/40 to-slate-900/60"
    >
    </div>

    <!-- Grid pattern background -->
    <div
        class="absolute inset-0 opacity-5"
        style="background-image: linear-gradient(rgba(255,255,255,0.1) 1px, transparent 1px), linear-gradient(90deg, rgba(255,255,255,0.1) 1px, transparent 1px); background-size: 50px 50px;"
    >
    </div>

    <div class="max-w-6xl mx-auto relative z-10">
        <!-- Section title -->
        <div class="text-center mb-16">
            <h2
                class="text-4xl md:text-5xl font-bold mb-6 bg-gradient-to-r from-white to-gray-300 bg-clip-text text-transparent"
            >
                Funcionalidades Clave
            </h2>
            <p class="text-xl text-gray-400 max-w-2xl mx-auto">
                Descubre las características más importantes que hacen de
                WorkSchedFlow una solución completa
            </p>
        </div>

        <!-- Slider Container -->
        <div class="relative">
            <!-- Navigation buttons -->
            <button
                id="prevBtn"
                class="slider-button absolute left-4 top-1/2 -translate-y-1/2 z-20 w-12 h-12 bg-slate-800/80 hover:bg-slate-700/80 rounded-full border border-slate-600/40 flex items-center justify-center text-white hover:text-emerald-400 transition-all duration-300 hover:scale-105 backdrop-blur-sm"
                aria-label="Anterior"
            >
                <svg
                    width="20"
                    height="20"
                    fill="none"
                    stroke="currentColor"
                    viewBox="0 0 24 24"
                >
                    <path
                        stroke-linecap="round"
                        stroke-linejoin="round"
                        stroke-width="2"
                        d="M15 19l-7-7 7-7"></path>
                </svg>
            </button>

            <button
                id="nextBtn"
                class="slider-button absolute right-4 top-1/2 -translate-y-1/2 z-20 w-12 h-12 bg-slate-800/80 hover:bg-slate-700/80 rounded-full border border-slate-600/40 flex items-center justify-center text-white hover:text-emerald-400 transition-all duration-300 hover:scale-105 backdrop-blur-sm"
                aria-label="Siguiente"
            >
                <svg
                    width="20"
                    height="20"
                    fill="none"
                    stroke="currentColor"
                    viewBox="0 0 24 24"
                >
                    <path
                        stroke-linecap="round"
                        stroke-linejoin="round"
                        stroke-width="2"
                        d="M9 5l7 7-7 7"></path>
                </svg>
            </button>

            <!-- Slider wrapper -->
            <div class="overflow-hidden rounded-2xl">
                <div
                    id="slider"
                    class="flex transition-transform duration-500 ease-in-out"
                >
                    {featuresData.map((feature) => {
                        const theme = themeConfig[feature.theme];
                        return (
                            <div class="min-w-full">
                                <div class={`bg-gradient-to-br from-slate-800/50 to-slate-900/50 border border-slate-700/50 rounded-2xl overflow-hidden ${theme.hoverBorder} transition-all duration-300`}>
                                    <div class={`aspect-video bg-gradient-to-br ${theme.gradient} flex items-center justify-center relative overflow-hidden`}>
                                        <!-- Background image -->
                                        <div class="absolute inset-0">
                                            <img 
                                                src={feature.imageSrc} 
                                                alt={feature.imageAlt}
                                                class="w-full h-full object-cover opacity-90"
                                            />
                                        </div>
                                        
                                        <!-- Overlay -->
                                        <div class="absolute inset-0 bg-slate-900/60"></div>
                                        
                                        <div class="relative z-10 p-8 text-center">
                                            <div class={`w-24 h-24 ${theme.iconBg} rounded-full flex items-center justify-center mx-auto mb-4 border ${theme.iconBorder}`}>
                                                <svg
                                                    width="48"
                                                    height="48"
                                                    fill="none"
                                                    stroke="currentColor"
                                                    viewBox="0 0 24 24"
                                                    class={theme.iconColor}
                                                >
                                                    <path
                                                        stroke-linecap="round"
                                                        stroke-linejoin="round"
                                                        stroke-width="2"
                                                        d={feature.icon}
                                                    />
                                                </svg>
                                            </div>
                                            <h4 class="text-2xl font-bold text-white mb-2">
                                                {feature.title}
                                            </h4>
                                        </div>
                                    </div>
                                    <div class="p-8">
                                        <p class="text-gray-300 text-lg leading-relaxed mb-4">
                                            {feature.description}
                                        </p>
                                        <div class={`flex items-center ${theme.badgeColor} text-sm font-medium`}>
                                            <svg
                                                width="16"
                                                height="16"
                                                fill="currentColor"
                                                class="mr-2"
                                            >
                                                <path d="M8 0C3.58 0 0 3.58 0 8c0 4.42 3.58 8 8 8 4.42 0 8-3.58 8-8 0-4.42-3.58-8-8-8zm3.707 6.707l-4 4a1 1 0 01-1.414 0l-2-2a1 1 0 111.414-1.414L7 8.586l3.293-3.293a1 1 0 111.414 1.414z"/>
                                            </svg>
                                            {feature.badge}
                                        </div>
                                    </div>
                                </div>
                            </div>
                        );
                    })}
                </div>
            </div>

            <!-- Dynamic Slider indicators -->
            <div class="mobile-indicators flex justify-center mt-8 space-x-2">
                {featuresData.map((_, index) => (
                    <button
                        class={`indicator w-3 h-3 rounded-full transition-all duration-300 ${
                            index === 0 
                                ? 'bg-emerald-500' 
                                : 'bg-slate-600 hover:bg-slate-500'
                        }`}
                        data-slide={index}
                        aria-label={`Ir a slide ${index + 1}`}
                    />
                ))}
            </div>
        </div>
    </div>
</section>

<script is:inline>
    (() => {
        let sliderInitialized = false;
        
        function initFeaturesSlider() {
            if (sliderInitialized) return;
            
            console.log("Initializing FeaturesSlider...");
            
            const slider = document.getElementById("slider");
            const prevBtn = document.getElementById("prevBtn");
            const nextBtn = document.getElementById("nextBtn");
            const indicators = document.querySelectorAll(".indicator");

            if (!slider || !prevBtn || !nextBtn) {
                console.log("Elements not ready, retrying...");
                setTimeout(initFeaturesSlider, 100);
                return;
            }

            const slides = slider.querySelectorAll('.min-w-full');
            if (slides.length === 0) {
                console.log("No slides found, retrying...");
                setTimeout(initFeaturesSlider, 100);
                return;
            }

            sliderInitialized = true;
            let currentSlide = 0;
            const totalSlides = slides.length;
            
            console.log(`FeaturesSlider initialized with ${totalSlides} slides`);

        function updateSlider() {
            if (!slider) return;
            
            slider.style.transform = `translateX(-${currentSlide * 100}%)`;

            // Update indicators
            indicators.forEach((indicator, index) => {
                if (index === currentSlide) {
                    indicator.classList.remove("bg-slate-600");
                    indicator.classList.add("bg-emerald-500");
                } else {
                    indicator.classList.remove("bg-emerald-500");
                    indicator.classList.add("bg-slate-600");
                }
            });
        }

        function nextSlide() {
            currentSlide = (currentSlide + 1) % totalSlides;
            updateSlider();
        }

        function prevSlide() {
            currentSlide = (currentSlide - 1 + totalSlides) % totalSlides;
            updateSlider();
        }

        // Event listeners
        if (nextBtn) {
            nextBtn.addEventListener("click", nextSlide);
        }

        if (prevBtn) {
            prevBtn.addEventListener("click", prevSlide);
        }

        // Indicator clicks
        indicators.forEach((indicator, index) => {
            indicator.addEventListener("click", () => {
                currentSlide = index;
                updateSlider();
            });
        });

        // Auto-slide every 5 seconds
        setInterval(nextSlide, 50000);

        // Touch/swipe support
        let startX = 0;
        let startY = 0;
        let isDragging = false;
        let isHorizontalSwipe = false;

        if (slider) {
            slider.addEventListener("touchstart", (e) => {
                startX = e.touches[0].clientX;
                startY = e.touches[0].clientY;
                isDragging = true;
                isHorizontalSwipe = false;
            });

            slider.addEventListener("touchmove", (e) => {
                if (!isDragging) return;
                
                const currentX = e.touches[0].clientX;
                const currentY = e.touches[0].clientY;
                const diffX = Math.abs(currentX - startX);
                const diffY = Math.abs(currentY - startY);
                
                // Determine if this is a horizontal swipe (more horizontal than vertical movement)
                if (diffX > diffY && diffX > 10) {
                    isHorizontalSwipe = true;
                    e.preventDefault(); // Only prevent default for horizontal swipes
                } else if (diffY > diffX && diffY > 10) {
                    // This is vertical scroll, allow it
                    isDragging = false;
                    isHorizontalSwipe = false;
                }
            });

            slider.addEventListener("touchend", (e) => {
                if (!isDragging || !isHorizontalSwipe) {
                    isDragging = false;
                    isHorizontalSwipe = false;
                    return;
                }

                const endX = e.changedTouches[0].clientX;
                const diff = startX - endX;

                if (Math.abs(diff) > 50) {
                    // Minimum swipe distance
                    if (diff > 0) {
                        nextSlide();
                    } else {
                        prevSlide();
                    }
                }

                isDragging = false;
                isHorizontalSwipe = false;
            });
        }
        
            console.log("FeaturesSlider fully initialized and ready!");
        }
        
        // Initialize immediately
        initFeaturesSlider();
        
    })(); // End of IIFE
</script>

<style>
    .indicator {
        cursor: pointer;
    }

    .indicator:hover {
        transform: scale(1.2);
    }

    /* Mejorar experiencia táctil en móvil */
    #slider {
        touch-action: pan-y pinch-zoom; /* Permite scroll vertical pero detecta swipe horizontal */
    }

    /* Hacer los botones de navegación más grandes en móvil */
    @media (max-width: 768px) {
        .slider-button {
            width: 3rem;
            height: 3rem;
            font-size: 1.25rem;
        }
        
        /* Hacer los indicadores más grandes y espaciados en móvil */
        .mobile-indicators {
            gap: 0.75rem;
        }
        
        .mobile-indicators .indicator {
            width: 0.875rem;
            height: 0.875rem;
        }
    }
</style>
